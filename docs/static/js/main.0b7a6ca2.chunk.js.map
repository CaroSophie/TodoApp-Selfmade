{"version":3,"sources":["Header.js","Input.js","Todo.js","Delete.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Component","Input","handleKeyUp","this","props","className","placeholder","onKeyUp","Todo","_this$props","text","toggle","done","onClick","Delete","deletefunction","Counter","num","App","state","todos","_this","load","addTodo","event","key","newTodo","target","value","concat","Object","toConsumableArray","setState","toggleDone","index","slice","objectSpread","deleteToDo","deleteTodos","_this2","map","todo","src_Todo_0","src_Delete","filter","item","length","save","src_Header_0","src_Input_0","src_Counter_0","counterTodo","renderTodoList","localStorage","setItem","JSON","stringify","parse","getItem","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0b7a6ca2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Header.css'\n\nclass Header extends Component {\n  render() {\n    return <h1>To do list</h1>\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport './Input.css'\n\nclass Input extends Component {\n  render() {\n    const { handleKeyUp } = this.props\n    return (\n      <input\n        className=\"Input\"\n        placeholder=\"Add todo here ...\"\n        onKeyUp={handleKeyUp}\n      />\n    )\n  }\n}\n\nexport default Input\n","import React, { Component } from 'react'\nimport './Todo.css'\n\nclass Todo extends Component {\n  render() {\n    const { text, toggle, done } = this.props\n    return (\n      <li onClick={toggle} className={done ? 'Toggle Textstyle' : 'Textstyle'}>\n        {text}\n      </li>\n    )\n  }\n}\n\nexport default Todo\n","import React, { Component } from 'react'\nimport './Button.css'\n\nclass Delete extends Component {\n  render() {\n    const { deletefunction } = this.props\n    return (\n      <button onClick={deletefunction} className=\"Button\">\n        x\n      </button>\n    )\n  }\n}\n\nexport default Delete\n","import React, { Component } from 'react'\nimport './Counter.css'\n\nclass Counter extends Component {\n  render() {\n    return <div className=\"Counter\">Checked: {this.props.num}</div>\n  }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\nimport './App.css'\nimport Header from './Header'\nimport Input from './Input'\nimport Todo from './Todo'\nimport Delete from './Delete'\nimport Counter from './Counter'\n\nclass App extends Component {\n  state = {\n    todos: this.load()\n  }\n\n  addTodo = event => {\n    if (event.key === 'Enter') {\n      const newTodo = [\n        { text: event.target.value, done: false },\n        ...this.state.todos\n      ]\n      this.setState({\n        todos: newTodo\n      })\n      event.target.value = ''\n    }\n  }\n\n  toggleDone = index => {\n    const { todos } = this.state\n    const toggleDone = [\n      ...todos.slice(0, index),\n      { ...todos[index], done: !todos[index].done },\n      ...todos.slice(index + 1)\n    ]\n    this.setState({\n      todos: toggleDone\n    })\n  }\n\n  deleteToDo = index => {\n    const { todos } = this.state\n    const deleteTodos = [...todos.slice(0, index), ...todos.slice(index + 1)]\n\n    this.setState({\n      todos: deleteTodos\n    })\n  }\n\n  renderTodoList() {\n    return this.state.todos.map((todo, index) => (\n      <div className=\"Showtodos\">\n        <Todo\n          key={todo.text}\n          text={todo.text}\n          toggle={() => {\n            this.toggleDone(index)\n          }}\n          done={todo.done}\n        />\n        <Delete\n          deletefunction={() => {\n            this.deleteToDo(index)\n          }}\n        />\n      </div>\n    ))\n  }\n\n  counterTodo() {\n    return this.state.todos.filter(item => item.done).length\n  }\n\n  render() {\n    this.save()\n    return (\n      <div>\n        <Header />\n        <div className=\"Styleinput\">\n          <Input handleKeyUp={this.addTodo} />\n          <Counter num={this.counterTodo()} />\n        </div>\n        {this.renderTodoList()}\n      </div>\n    )\n  }\n\n  save() {\n    localStorage.setItem('todo-app--todos', JSON.stringify(this.state.todos))\n  }\n\n  load() {\n    try {\n      return JSON.parse(localStorage.getItem('todo-app--todos')) || []\n    } catch (err) {\n      return []\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}